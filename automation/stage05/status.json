{
  "$schema": "../status.schema.json",
  "state": "needs_attention",
  "checks": [
    {
      "name": "asdf",
      "status": "warning",
      "message": "asdf not available",
      "path": ""
    },
    {
      "name": "npm",
      "status": "ok",
      "message": "found",
      "path": "/root/.nvm/versions/node/v20.19.4/bin/npm"
    },
    {
      "name": "npx",
      "status": "ok",
      "message": "found",
      "path": "/root/.nvm/versions/node/v20.19.4/bin/npx"
    },
    {
      "name": "act",
      "status": "warning",
      "message": "failed to download https://github.com/nektos/act/releases/download/v0.2.59/act_Linux_x86_64.tar.gz",
      "path": ""
    },
    {
      "name": "k6",
      "status": "warning",
      "message": "failed to download https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz",
      "path": ""
    },
    {
      "name": "schemathesis",
      "status": "warning",
      "message": "pip install --user schemathesis failed",
      "path": ""
    },
    {
      "name": "bandit",
      "status": "ok",
      "message": "found",
      "path": "/workspace/lame-rms/automation/bin/tools/bandit"
    },
    {
      "name": "playwright",
      "status": "warning",
      "message": "npx playwright install failed",
      "path": ""
    },
    {
      "name": "terraform",
      "status": "warning",
      "message": "failed to download https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip",
      "path": ""
    },
    {
      "name": "helm",
      "status": "warning",
      "message": "failed to download https://get.helm.sh/helm-v3.14.4-linux-amd64.tar.gz",
      "path": ""
    },
    {
      "name": "pytest-integration",
      "status": "ok",
      "message": "pytest backend/tests/integration -q"
    },
    {
      "name": "k6-load",
      "status": "ok",
      "message": "k6 run backend/loadtests/main.js (container)"
    },
    {
      "name": "contract-diff",
      "status": "ok",
      "message": "Compared backend/openapi.json with legacy specification"
    },
    {
      "name": "schemathesis-contract",
      "status": "ok",
      "message": "schemathesis contract tests (container)"
    }
  ],
  "artifacts": [
    "automation/stage05/report.md",
    "automation/stage05/summary.json",
    "automation/stage05/metrics.json",
    "automation/stage05/contract_diff.json",
    "automation/stage05/logs/pytest_integration.log",
    "automation/stage05/pytest_integration.html",
    "automation/stage05/logs/schemathesis.log",
    "automation/stage05/schemathesis_summary.json",
    "automation/stage05/logs/k6.log",
    "automation/stage05/logs/uvicorn.log",
    "automation/stage05/logs/uvicorn_schemathesis.log"
  ],
  "last_run": "2025-10-31T12:22:19.163803+00:00",
  "warnings": [
    {
      "tool": "asdf",
      "message": "asdf not available"
    },
    {
      "tool": "act",
      "message": "failed to download https://github.com/nektos/act/releases/download/v0.2.59/act_Linux_x86_64.tar.gz"
    },
    {
      "tool": "k6",
      "message": "failed to download https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz"
    },
    {
      "tool": "schemathesis",
      "message": "pip install --user schemathesis failed"
    },
    {
      "tool": "playwright",
      "message": "npx playwright install failed"
    },
    {
      "tool": "terraform",
      "message": "failed to download https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip"
    },
    {
      "tool": "helm",
      "message": "failed to download https://get.helm.sh/helm-v3.14.4-linux-amd64.tar.gz"
    },
    {
      "tool": "pytest",
      "message": "Allure plugin missing; used log/HTML fallback"
    }
  ],
  "notes": [
    "self_check.sh executed",
    "pytest exit=0",
    "k6 status=ok",
    "schemathesis status=ok"
  ],
  "extra": {
    "contract_diff": {
      "added": [
        {
          "method": "GET",
          "path": "/api/assets",
          "summary": "List assets with pagination and optional free-text search."
        },
        {
          "method": "GET",
          "path": "/api/assets/{asset_id}",
          "summary": "Retrieve detailed information about a single asset by identifier."
        }
      ],
      "missing_in_new": [
        {
          "method": "GET",
          "path": "/api/assets/searchAssetsBarcode",
          "summary": "searchAssetsBarcode (GET)"
        },
        {
          "method": "POST",
          "path": "/api/assets/archive",
          "summary": "archive (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/barcodes/assign",
          "summary": "assign (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/barcodes/delete",
          "summary": "delete (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/barcodes/index",
          "summary": "index (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/barcodes/search",
          "summary": "search (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/delete",
          "summary": "delete (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/editAsset",
          "summary": "editAsset (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/editAssetType",
          "summary": "editAssetType (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/editAssetTypeDefinableFields",
          "summary": "editAssetTypeDefinableFields (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/export",
          "summary": "export (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/getAssetTypeData",
          "summary": "getAssetTypeData (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/list",
          "summary": "list (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/newAssetFromType",
          "summary": "newAssetFromType (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/newAssetType",
          "summary": "newAssetType (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/searchAssets",
          "summary": "searchAssets (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/searchType",
          "summary": "searchType (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/substitutions",
          "summary": "substitutions (POST)"
        },
        {
          "method": "POST",
          "path": "/api/assets/transfer",
          "summary": "transfer (POST)"
        }
      ],
      "unchanged": 0,
      "summary": {
        "new_total": 4,
        "legacy_total": 209
      }
    },
    "performance": {
      "performance": {
        "status": "ok",
        "message": "k6 run succeeded",
        "runner": "container",
        "exit_code": 0,
        "summary_path": null,
        "log_path": "automation/stage05/logs/k6.log",
        "p95_latency_ms": null,
        "success_rate": null
      },
      "contract": {
        "status": "ok",
        "message": "schemathesis run succeeded",
        "runner": "container",
        "exit_code": 0,
        "log_path": "automation/stage05/logs/schemathesis.log",
        "summary_path": "automation/stage05/schemathesis_summary.json",
        "success_rate": 1.0,
        "checks": {
          "passed": 3,
          "total": 3
        }
      }
    },
    "test_artifacts": {
      "pytest_log": "automation/stage05/logs/pytest_integration.log",
      "html_report": "automation/stage05/pytest_integration.html",
      "allure_results": "automation/stage05/allure-results",
      "schemathesis_log": "automation/stage05/logs/schemathesis.log",
      "schemathesis_summary": "automation/stage05/schemathesis_summary.json"
    },
    "contract_tests": {
      "schema": "backend/openapi.json",
      "base_url": "http://127.0.0.1:8060",
      "status": "ok",
      "exit_code": 0,
      "message": "schemathesis run succeeded",
      "runner": "container"
    },
    "tools_summary": {
      "total": 10,
      "ok": 3,
      "installed": 0,
      "warnings": 7
    },
    "backlog_item": {
      "id": "M5-001",
      "title": "Assets API read models",
      "domain": "assets"
    },
    "feature_flag": "assets_api"
  }
}
